""" Модуль верхнего уровня, для учебного проекта 1: Крестики-нолики """

# ИСПОЛЬЗОВАТЬ: на будущее - в модуле верхнего уровня не должно быть обращений в стандартную и внешние библиотеки, все такие обращения делаются из дополнительных модулей; а в модуле верхнего уровня остаётся импорт дополнительных модулей и основная логика программы - смотрите код в моём проекте
#  пока работаете в одном модуле, можно оставить эти импорты здесь, но затем они должны быть разнесены по дополнительным модулям вместе с функциями, которые эти импорты используют
from pathlib import Path
from sys import argv
from configparser import ConfigParser as CP

# импорт дополнительных модулей
# ИСПРАВИТЬ: имя модуля равно названию соответствующего файла (часть имени файла до последней точки и расширения) - в вашем случае это Help, а не help
import help


# сохраняет путь к файлу в переменную (получилось только с абсолютным путем)
# ИСПРАВИТЬ: проблема в том, что на разных системах - например, на вашей и на моей - этот путь будет разным - у меня было реализовано решение, которое использует путь к файлу данного скрипта main.py, предполагая, что файл с данными players.ini находится в том же каталоге
#            таким образом, при каждом запуске этот путь вычисляется повторно, но зато у нас точно не будет проблем с различными путями - главное, чтобы файлы скриптов и файлы данных находились в одном каталоге
SCRIPT_DIR = Path(argv[0]).parent
PLAYERS_INI_PATH = SCRIPT_DIR / 'players.ini'


# глобальные переменные
STATS = {}


def read_ini():
    """ Читает данные из файла """
    # читает из файла player.ini
    with PLAYERS_INI_PATH.open() as ini_file:
        # для проверки работы функции
        print(f"P{ini_file.read()}")


def show_field():
    """ Выводит в стандартный поток игровое поле с ходами игроков """
    # Пример вывода игрового поля
    #  X | O |
    # ———————————
    #  O | X | X
    # ———————————
    #    |   |


def check_win():
    """ Проверяет игровое поле, есть ли выигрышная комбинация """


read_ini()


# суперцикл
while True:
    command = input(' Для начала игры введите new для завершения exit: ').lower()

    if command in ('quit', 'exit', 'q', 'e'):
        break

    elif command in ('new', 'n'):
        pass
